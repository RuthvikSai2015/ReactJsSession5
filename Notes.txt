Javascript is line by line execution Synchronous way

  https://developer.mozilla.org/en-US/docs/Web/HTML

   Assignment : Profiler page 

  
   header 

     image => <img />
     
      BioData 

   footer 

   Javascript Basics

   1. Javascript variables and data types 
  --------------------------------------------------------------------
     what is a variable ?
	 
	 -> variable is a named storage for data 
	 
	  add to cart , save 
	 -> Variables are used to store the information
	 
	  Rules to follow while declaring the variables 
	  
	1. Variable names should contain only letter,digits,symbols($) and _(underscore)
	2. first character must not be digit
	
	   var username;
	   let username;
	   const username;
	   
	   let username; 
	   let user_name;
	   let userName; // camelCase notation 
	   
	3. Variable Names should be in Camel Case 
	
	   declaring the variable ;
	   
	   let $=3;
	   let my_name;
	   let _=2;
	   let 1a=4;

      Variable Names are Case Senstive ;
	  
	4. Should not use reserved words 
        let let=10 //invalid
		let return=10; //invalid

    Data Types 
	
	Strictly typed language means it is sticking into one data type 
	
	Javascript is a dynamically typed language it is not bothered what is inside
	
	typeof(message) => return the type 
	
	10 + 10 = 20
	
	10 + "10" = 1010 => concatination 

    1. Number type
	
	   let n = 123;
	   let n = 123.45 ;
	   
	2. Big Int 
	
	   let n = 354321345678232546789n;
	   
	3. String 
	
	   let a = "hello";
	   let b = 'hello';
	   let c = `hello`; // template string literal 
	   
	   let a ;
	   
	4. Boolean 
	    true or false 
		if( 10 >1 ) {}
		
	5. undefined 
	    let c ; 
		
    6. null 
	   In Javascript null means "reference to non existing object"
	   
	7. Object 
	    All data types like string , number , boolean single values 
		Objects can hold multiple values
		
		let user = {
		   key : value 
		}
	   
	    let user = {
		   name : "rakesh",
           age: 10,
           id: 123		   
		}
		
		function and Arrays 
		
		let fruit = ['apple','orange']; typeof(fruit) => object 
		
=======================Objects========================================

        What is an Object ?
		
		Objects => Collection of various data types 
		
		let user = {
		    name : "rakesh"
		}

        How to declare a object?
		
		1. let user = new Object(); //Object Constructor 
		2. let user = {};  //Object Literal
		
		objectName.key => Dot Notation
		
		https://nodejs.org/en/download => cmd line => node --version
		
		=> node objects.js
		
		//dot notation 
		user.age = 31;
		
		delete user.isAdmin 
		
		let a = 10;
		
		delete a ; // can this be done?
		
		delete => Oject property not variable 
		
		user = {
		    first name : "krishna"
		}
		
		In Objects can i use key as a reserved word?
		
		Yes 
		
		let userDetails = {
		   const :10,
		   let: 50,
		   return: "true"
		}
		
		// For In Loop for Objects
		
		--------------------------------------------------------------------------
		Arrays 

        Collection of elements 
		
		let arr = new Array();
		let arr = [];          [] - Array {} - Object
		
		Arrays are used to store ordered collection of data 
		
		let fruits = ['apple','banana'];
		
		fruit[0];
		
		Array Methods :
		
=============================17-01-2024=======================================

          Push and Pop Methods 
		  
		  push => add element at the end of an array ,return the length of an array after insertion
		  pop => remove the element at end of an array , return the element which has  been removed 
		  
		  fruits.length 
		  
		  length property will not be calculated with No of Items
		  
		  but greatest numeric index + 1 as length 
		  
		  == and === 
		  
		  diff btw == vs === ?
		  
		  == value not bothered about the data type 
		  
		  === value and data type is compared 
		  
		  1 == "1" // type conversion 
		  
		  1 === "1" //dont want conversion just check with type 
		  
		  How can you make an array empty ?
		  
		  fruits.length = 0 ;
		  
================================18-01-2024==================================

	Javascript Functions :
	
	       1. Functions are main building blocks
		   2. Allow not to repeat code
		   
		function funName(a1 , a2 , a3 ...........an){
		  ..function body
		}
	    funName(p1,p2,...pn); //parameters 
		
		NaN => Not an Number 
		
		undefined + undefined // NaN 
		
--------------------------------------------------------
		
		Naming Conventions :
		
		var userName;
		
		like incomeTax , getUserName , checkTheAge 
		
		Function Expressions :
		
	    let sum = function(a,b){
		   return a+b;
		}
		sum(12,34);
		
		------------------------------------------------------
		
		Conditional Statements 
		
		if(age > 70 ){
		
		       //senior citizen benefit
			   
		}else{
		//some other logic
		}
		
		truthy and falsy values 
		
		0 means false 
		undefined , 0 , NaN , false 
		
		Loops => are a way to repeat the same code mutiple times 
		
		While and for loops 
		
		Initilization , Condition , Increment/Decrement 
		
		for(initilization , condition , increment/decrement){
		
		}
		
		objects we have [for in] 
		
		Arrays we have [for of]
		
		Objects for..in loop and Arrays for..of loop 
		
===============================19-01-2024===================================

      Diff Btw let , var and const 
	  
	    In terms of 
		1. Hoisting
		2. Scope/Memory
		3. redeclare/update 
		
		Hoisting 
         
		 where it moves the variable declaration and function declaration to the top 
		 of its nearest scope 
		 
		 console.log(a);
         var a = 10;
	
         var a;
         console.log(a);
         a = 10;		

          var supports hoisting 

          Let and const doesnt support hoisting 

          ES6 let and const were introduced

          let a = 10;
              a=12; 

          const ORG_NAME = "Ashok IT";
          const birthYear = 1993;
          const age = 31; // keeps on changing 

       2. Scope/Memory 

          function level scope and block level scope { visibility }
		  
		  why to hold the memory ?
		  let 
		  
		3. 
		   var supports redeclaration and updation 
		    
			let 
			const no redeclaration / updation 
			
			 const fruits = ["Apple","Banana","Plum"];

             fruits[3]="guava"; //possible 
			 
			 fruits = ["Apple","Banana","Plum"]; // not possible 
			 
			 with let no redeclaration but updation is possible 
			 
        Destructuring Objects and Arrays 
		
		  how to destructure object and array

          Extract the propert from an object and assign them to variable

          let user = {
			name : "rakesh",
			age: 10,
			id: 123	
		}
		var name = user.name;
		var age = user.age;

		var {name,age,id} = user;	

==========================22-01-2024========================================

        const mobileNumber = user.mobileNumber === undefined ? defaultValue: user.mobileNumber

       Ternary Operator 

       const varName = condition ? "if true this will execute " : "If it is false this will execute "	   

       //Nested objects property names (keys) are not needed 
	   
	   const {return} = user; // const return = user.return ; that keys are not reserved words
         
       const {address : {city,doorNo}} = user; // 
	   const adress = user.address const city = user.address.city
	   
	   

       console.log(city.state, doorNo);  //  
	   
	   Array Destructuring 
	   
	   
	   let arr = ["kumar","shree","123","456","789"];

		// rest operator ...

		let [firstName , lastName , ...x] = arr;
		
=====================23-01-2024====================================

     Optional Chaining 
	 
	 console.log(user?.address?.city); 
	 
	 1. Arrow Functions
	 2. Map and Filter
	 3. Debugging of Javascript
	 
	 //function declaration 
	 function funName(a1,a2,....an){
	    //function body
	 }
	 
	 Map and Filter 
	 
	 Task : [1,2,3,4,5] => Sum of Element of this array 
	 
	 https://www.geeksforgeeks.org/how-to-use-map-filter-and-reduce-in-javascript/
	 
	 3. 
	 
	    debugger;
		Browser breakpoint:
		Conditional Breakpoint:
		
		
	 Scope and Callbacks 
	 
	   Scope => visibility of an element 
	            local scope{ } and global scope

      Callback to achieve asynchronous way of programming/communication 

      A callback is a function that is passed as an argument to another function 

      "called back" at a later time 

     ====================29-01-2024====================================

      Prototype 
	  
	  using prototype we can add data members or functions to objects
	  
	  dynamically add functions
	  -------------------------------------------------------------
	  Import and Export in Javascript
	  
	  component => user , component => login 
	  
	  reusable scenario 
	  
	  allows the user to create seperate and reusable components 
	  
	  Export allows you to export a module to be used in another javascript code 
	  
	  we can use import to import that module to use it in our javascript code 
	  
	  default export and named export 
	  
	  export default user ; //1 default export 
      export {} // Named Export 	  
	  
	  node --version 
	  16 to 20 
	  
	  npm --version 
	  8 to 10 
	  
	  npx --version 
	  8 to 10 
	  
==========================30-01-2024=========================================
      What is React JS?
	  
	     React Js is a javscript library used to develop web pages
		 
		 Components in react 
		 
		 1. Reusability 
		 2. Identify Bugs
		 3. Maintaing easy 
		 
		 https://react.dev/learn
	  
	     npm => Node package manager => used to maintain the dependencies 
		 npx => node package executable => 
	  
	      local server , live reload , babel transpilation => npx 
		  
		  npm -g create-react-app project_name 
		  
=====================31-01-2024========================

        Browser only understands HTML,CSs and javascript 
		
		Code in React Js? 
		
		yes Babel is doing that job for me 
		
		Babel Transpiler 
		
		Webpack => bundle our code => ready to deploy production build 
		
		virtual DOM => ReactDom is going to the job of virtual dom 
		
		const root = ReactDOM.createRoot(document.getElementById('root'));
 
        ReactDOM.createRoot is a container which keeps all the Components 
		
		StrictMode => it is going to warn if we dont follow the rules properly 
		
		React js => develop react applications
		
		React DOM => inject the changes into Virtual DOM => Web 
		
		React Native => Mobile 
		
==================================01-02-2024======================

       Naming Conventions
	    
		index.js index.css index.test.js
		Button.js Button.css Button.test.js  button
		
		JSX => Combination of Javascript and XML 
		
		Components in React
		
		App.js 
		
		<App/> - Camelcase 
		<div/> - html element 
		
		JSX helps us to convert html elements into react components 
		
		Q. Without jsx can i write the code?
		
		babeljs.io 
		
	=> Creating a Component 
	
	   Class Components => class 
	   functional Components => function
	   
	   To call a function as a componet it should return jsx
	   
	   App.js is a container 
	   
	   React Fragment 
	   
	   1) import React from 'react'
	      <React.Fragment> </React.Fragment>
		  
	   2) import {Fragment} from 'react' // <Fragment></Fragment> 
	   3) <> </>
	 
========================02-02-2024=======================================
        
		If your writing javascript inside jsx then you should start with {}
		 {}
		 
		package.json => dependencies 
		
		devdependenices -- developer wants some flexibility , intendation ,
		                   formatting code , some plugins
						   ex: prettier format the code 
						   
		=> npm install dependency_name/module 
		
		npm install lodash => dependencies 
		
		how to mention it as a dev dependency?
		
		 npm install --save lodash 
		 
		 npm install --save-dev lodash 
             "devDependencies": {
				"lodash": "^4.17.21"
			  }
         npm i -D lodash 
		 
	----------------React Props--------------------------------------
	
	  props stand for Properties , this is a special keyword in react 
	  
	  function parameters 
	  
	  Hello react js
	  
	  Hello Kumar 
	  
	  Hello radha 
	  
	  parent to child communication => react props 
	  
	  boolean values are treated as 0 and 1 
	  
	  String(boolean) 
	  
	  If you pass a property and not value default value will be true 
	  
	  1. Props are special keyword of reactjs
	  2. Without value default is true
	  3. We can pass any data as props value 
	  4. We cannot use objects,arrays directly inside the component jsx 
	  5. when passing numbers, boolean use {}
	  6. If we are not passing all required props , we will not get any error
	  
========================05=02-2024========================================

        const user = { name:'Savitha' , email:'soujanya18@gmail.com'}
		
		  const {email,name} =  user ;
		  
	  7.Props are readonly 
	  8. More than 2 props go for destructuring 
	  9. Parent Component is going to Communicate to child component(one way)

      Conditional Rendering , React Event Handling and Lists

      	CR in short 

       1. CR means ability to render different UI Component based on true or false
          condition 
 		  
		if(0)  if("user")
		
		condition/exp ? "if it is true this part will execute ":"if it is false this part will execute"
		
		for situation where there are 2 expected outcomes then go for ternary 
		
		for situation there is only one outcome go for logical operator 
		
	----------------------------------------------------------------------------
		React Event Handling 
		
		https://www.javatpoint.com/javascript-events
		
		<button onclick="buttonClick()">
		  Button text
		 </button>
		 
		 <button onClick={buttonClick}>
		  Button text
		 </button>
		React Events 
		1. React event names should be in camelCase rather than lowercase
		2. You should not mention in {} 
		    onClick = {buttonClicked()}
		3. We should not mention () while putting the function 
		
		why we should not mention ()
		
		onClick = {undefined} 
		
=======================06-02-2024=====================================

       React List and keys
	   
	     1.className instead of class ? 
		 
		  class css selector 
		  .class { //apply styles}
		  <div class="city"> </div>
		  
	We are writing html and javascript in same file and calling it as jsx
	
	why cant we use class?
	
	   React class components
	   
	     className for css 
		 
	why lists and keys are important 
	
	    [1,2,3,4,5] => [2,4,6,8,10] 
		
		we get the warning if we are not using key property 
		
		key 
		
		uniquely identify an item in list 
		
	 <li key={0} > {1} <li>
	 <li key={1}> {2} </li>
	 <li key={2} > {3} </li>
	 <li key={3} > {4} </li>
	 
	 Task : https://jsonplaceholder.typicode.com/users
	 
	    try to print the user object 
		
	 Array of Objects 
	 
	 Task:
	      const users = [
        {id:123,name:"rakesh",email:"rakesh@gmail.com",phone:"8654321"},
        {id:456,name:"kumar",email:"kumar@gmail.com",phone:"123456"},
        {id:789,name:"govind",email:"govind@gmail.com",phone:"456789"}
    ]
	 
=============================07-02-2024============================

     React Hooks
	 
	 Class Components life cycle methods , state 
	 
	 Functional Components => static dislay components 
	 Class Components => State and life cycle methods
	 
	 Component 
	 Life Cycle Methods :
	 
	 function sum(){
	 
	 }
	 sum()
	 
	 componentDidMount()
	 componentDidUpdate()
	 componentWillUnMount()
	 
	 React is going to call this !!!!!!
	 
	 3 phases in reactjs class component
	 
	 1.Mounting => whenever the component comes into picture
	 2.Updating => update an action , click whatever
	 3.UnMounting => clear the resources , close  connections 
	 
	 User friendly 
	 
	React Hooks 
	
	       Functional components to use a state and lifecycle methods and they call them as hooks
		
	Hooks are functions that let you "hook into" react features like state
	and life cycle methods  from functional components 
	
	State => useState hook 
	Life cycle methods => useEffect 
	
	Rules 
	1. The Name of the hook should be started with "use"
	   why it should be started with use? react diff normal and hooks(use)
	
	When we have to modify the data => state => useState
	
	const [a,b] = [10,20]  [ 0 , f()]
	
	useState => to make components dynamic 
	
	useState("initial value of the state or props value")
	useState(0); 
	
	array Reference

======================08-02-2024=========================

     useState 

    1. State Changes 
         count = count + 1; => wrong way of updation
		 
		setCount(count+1);
		
    2. whenever you update the state variables , the component will be 
	   re-rendered again ,if we directly change it , react has no idea to re-render again 
	   
	3. State changes are asynchronous and scheduled ,immediately it will not
	   re-render , it will keep in batch 
	   
	   setCount(count + 1); // 0+1 = 1
       setCount(count + 1); // 1+1 = 2
	   
	4. State results with older state value 
	
	     setCount((prevCount) => prevCount + 1); // 0+1 = 1 // => old state preserving 
         setCount((prevCount) => prevCount + 1); 
		 
     https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input
	 
	 5. Use State changes are not merged , those are replaced 
	 
	     preserve the state (...) 
		 
	-----------------------------------------------------------------------------
	
	    useEffect hook  
		
		componentDidMount() 
		 useEffect(() => {
           console.log("initial use effect console");
          });
		componentDidUpdate()
		componentWillUnMount()
		
		useEffect will serve the same purpose as life cycle methods 
		
		useEffect run after every render by default , it runs on update ,
		it runs the component is removed from DOM
		
		 when you want to pass the parameters to function 
		 {() => setCount(count+1)}
		 
		 how to make useEffect to serve 3 phases?
		 
		 componentDidUpdate() => state updated 
		 
		 componentWillUnMount() => close the resources
		 
		 componentDidMount()
		  useEffect(() => {
           console.log("initial use effect console");
          });
		  
		  useEffect(1,2);
		  useEffect(callback,[]);
		  
		  componentDidUpdate() => state updated 
		  useEffect(() => {
                console.log("update use effect console");
            },[]);
		   dependency array 
		   
		 componentWillUnMount() => close the resources
		 
		  useEffect(() => {
          const socket = socketIOClient("server");
          socket.on(" ",data =>{
            //setResponse 
          }
        );
         return() => WebSocket.disconnect();
       },[]);
	   
	 1. How to do API call in useEffect
	 2. ReactJs 18 version useEffect calls twice
	 3. Children Props 
	 
	   how we can achieve?
	   
	   1. fetch is a browser api(no need to install)
	   2. Axios third party library 
	      npm i axios 
		  	
		fetch(`https://jsonplaceholder.typicode.com/users`) // url 
            .then(response => response.json())  // resolved or rejected
            .then(response => console.log(response);

         Http status codes :

           200 - 299 => success status code
           500 => server related 
           400 => client error codes
 
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Status 
		
		https://jsonplaceholder.typicode.com/posts
		https://jsonplaceholder.typicode.com/users
		https://jsonplaceholder.typicode.com/todos
	   
	   Task : Conditional Rendering i need to display data dynamically 
	   
=================================12-02-2024=================================

    Rules of Hooks when you write your own or custom hook 

    1. Name Should start with "useHookName"
    2. Hooks should be called a the top level 
       dont call inside loops,conditions and nested function 
	   
	   React ensures that hooks are called in the same order each time component renders
	   
	3. Only call hooks from react functions or custom hooks. dont call hooks from
	   regular javascript functions 
	   
	   function regularFunction(){ //regular function 
	       const [content,setContent] = useState('');
		   // no render function 
	   }
	   function reactFunction(){ //it will inform react to render 
	       const [content,setContent] = useState('');
		   return (
		     <h1> Render </h1>
		   )
	   }
	   
	   ensures that all state logic in a component is clearly visible 
	   
======================React Error Handling=======================================

       React Error Boundary is a third party library 
	   
	   npm --save-dev i react-error-boundary
	   
	   create a fallbackcomponent 
	   
====================13-02-2024=========================================

       1.children props 
	   2.diff between default export and named export 
	   3.passing data btw parent to child and child to parent 
	   
	 In each js file you can have only one default export 
	  
	 Children Props 

         <ReactChildrenProps>  Content  <ReactChildrenProps/>	 
            parent             children 
			
	 we can even pass component as children also 
	 
	 Parent to child => props
	 Child to Parent => Events 
	 
	 https://github.com/RuthvikSai2015/ReactJsSession5
	 
=========================14-02-2024=======================================

      Css classes are refered as className
	  
	  style="backgroundcolor:blue"
	  
	  style={{backgroundColor:'blue'}}
	  
	  {(first)} => using js in jsx 
	  
	  {(second)} => key value object 
	  
	  {
	  
	     background-color  // invalid
	  }
	  
	  background-color  => backgroundColor in react 
	  
	  React Router
	  ---------------------------------------
	  
	  React Router Dom 
	  
	 npm i react-router-dom
	   
	    embed the container in Browser Router 
		
	 we have route to define the each route of application 
	 
	   1. Path (/guides)
	   2. which component element {}
	   
       <Route path="/" element={Home} /> 
	   
	   * => other than all available routes please render NotFound
	   
	   On Click routes 
	   
	   <Link> in react on click routes 
	   
	   Task: Notfound component include image 
	   
================15-02-2024========================================

      <button onClick={} > Go Back to Home </button>
      
	   useNavigate 
	   
	   perform the navigation actions with better compatibility
	   
	   Nested Routing :id
	   
	   /posts/id
	   
	   dynamic data from url => useParams() => hook for getting url parameters
	   
	   const {id} = useParams();
	   
	   Outlet => it acts as a place holder for nested component 

=========================20-02-2024==========================================

     CSS Grid and CSS Flex box 

     Layouts 

      make use of css 

       Grid - layout structure 

       Flex : align the items inside project 

      grid-template-rows: 80px 1fr 70px

      row header => 80px  footer => 70px 1fr => remaining space 

      80px(1 row) 1fr(2 row) 70px(3 row)
	  
	  grid-template-areas : "header header header"
	                        "nav article section"
							"nav footer footer";
				
    Practise Session				
	Task: React Components independent component 

	
	https://css-tricks.com/
	
	Task : left image then search bar , right any options
	
	npm i react-bootstrap
	
	https://react-bootstrap.github.io/
	
	
============================21-02-2024===============================

      React Forms 
	  
	  1. Plain React Part , add forms , add checkboxes
	  2. Formik and Yup Library 
	
	   Regular Expressions to validate given input is valid or not 
	   
	   Task: extend the code for password validation 
	   
=============================22-02-2024====================================

      Formik is a small library which helps 
	  
	  1. getting values in and out from formik
	  2. Validation and error messages(Yup schema)
	  3. Handling form submission 
	  
	  npm install formik yup 
	   
	   rendered properties concept 
	   
	   Task: implement disable button in plain react 
	 
	
	
	
	  
        

	   
		
		
			  
			  
          		  
       
		
		
		
		

		
		
		
		   


